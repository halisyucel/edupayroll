// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentCreateInput,
  DocumentUpdateInput,
  ResponseObjectDocumentErrorCode,
} from '../models/index';
import {
    DocumentCreateInputFromJSON,
    DocumentCreateInputToJSON,
    DocumentUpdateInputFromJSON,
    DocumentUpdateInputToJSON,
    ResponseObjectDocumentErrorCodeFromJSON,
    ResponseObjectDocumentErrorCodeToJSON,
} from '../models/index';

export interface CreateDocumentRequest {
    documentCreateInput: DocumentCreateInput;
}

export interface UpdateDocumentRequest {
    id: string;
    documentUpdateInput: DocumentUpdateInput;
}

/**
 * 
 */
export class DocumentControllerApi extends runtime.BaseAPI {

    /**
     */
    async createDocumentRaw(requestParameters: CreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectDocumentErrorCode>> {
        if (requestParameters['documentCreateInput'] == null) {
            throw new runtime.RequiredError(
                'documentCreateInput',
                'Required parameter "documentCreateInput" was null or undefined when calling createDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentCreateInputToJSON(requestParameters['documentCreateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectDocumentErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async createDocument(requestParameters: CreateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectDocumentErrorCode> {
        const response = await this.createDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDocumentRaw(requestParameters: UpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectDocumentErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateDocument().'
            );
        }

        if (requestParameters['documentUpdateInput'] == null) {
            throw new runtime.RequiredError(
                'documentUpdateInput',
                'Required parameter "documentUpdateInput" was null or undefined when calling updateDocument().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentUpdateInputToJSON(requestParameters['documentUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectDocumentErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateDocument(requestParameters: UpdateDocumentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectDocumentErrorCode> {
        const response = await this.updateDocumentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

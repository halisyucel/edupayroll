// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RecordCreateDTO,
  RecordUpdateInformationDTO,
  RecordUpdateTeacherDTO,
  RecordUpdateTypeDTO,
  ResponseListRecordRecordErrorCode,
  ResponseObjectRecordErrorCode,
} from '../models/index';
import {
    RecordCreateDTOFromJSON,
    RecordCreateDTOToJSON,
    RecordUpdateInformationDTOFromJSON,
    RecordUpdateInformationDTOToJSON,
    RecordUpdateTeacherDTOFromJSON,
    RecordUpdateTeacherDTOToJSON,
    RecordUpdateTypeDTOFromJSON,
    RecordUpdateTypeDTOToJSON,
    ResponseListRecordRecordErrorCodeFromJSON,
    ResponseListRecordRecordErrorCodeToJSON,
    ResponseObjectRecordErrorCodeFromJSON,
    ResponseObjectRecordErrorCodeToJSON,
} from '../models/index';

export interface CreateRequest {
    documentId: string;
    recordCreateDTO: RecordCreateDTO;
}

export interface DeleteRecordRequest {
    recordId: string;
}

export interface GetAllRequest {
    documentId: string;
}

export interface UpdateInformationRequest {
    recordId: string;
    recordUpdateInformationDTO: RecordUpdateInformationDTO;
}

export interface UpdateTeacher1Request {
    recordId: string;
    recordUpdateTeacherDTO: RecordUpdateTeacherDTO;
}

export interface UpdateTypeRequest {
    recordId: string;
    recordUpdateTypeDTO: RecordUpdateTypeDTO;
}

/**
 * 
 */
export class RecordControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectRecordErrorCode>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling create().'
            );
        }

        if (requestParameters['recordCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'recordCreateDTO',
                'Required parameter "recordCreateDTO" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RecordCreateDTOToJSON(requestParameters['recordCreateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectRecordErrorCode> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRecordRaw(requestParameters: DeleteRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectRecordErrorCode>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling deleteRecord().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/records/{recordId}`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async deleteRecord(requestParameters: DeleteRecordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectRecordErrorCode> {
        const response = await this.deleteRecordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllRaw(requestParameters: GetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseListRecordRecordErrorCode>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/records/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseListRecordRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async getAll(requestParameters: GetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseListRecordRecordErrorCode> {
        const response = await this.getAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateInformationRaw(requestParameters: UpdateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectRecordErrorCode>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling updateInformation().'
            );
        }

        if (requestParameters['recordUpdateInformationDTO'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateInformationDTO',
                'Required parameter "recordUpdateInformationDTO" was null or undefined when calling updateInformation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{recordId}/information`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateInformationDTOToJSON(requestParameters['recordUpdateInformationDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateInformation(requestParameters: UpdateInformationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectRecordErrorCode> {
        const response = await this.updateInformationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTeacher1Raw(requestParameters: UpdateTeacher1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectRecordErrorCode>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling updateTeacher1().'
            );
        }

        if (requestParameters['recordUpdateTeacherDTO'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateTeacherDTO',
                'Required parameter "recordUpdateTeacherDTO" was null or undefined when calling updateTeacher1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{recordId}/teacher`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateTeacherDTOToJSON(requestParameters['recordUpdateTeacherDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateTeacher1(requestParameters: UpdateTeacher1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectRecordErrorCode> {
        const response = await this.updateTeacher1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTypeRaw(requestParameters: UpdateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObjectRecordErrorCode>> {
        if (requestParameters['recordId'] == null) {
            throw new runtime.RequiredError(
                'recordId',
                'Required parameter "recordId" was null or undefined when calling updateType().'
            );
        }

        if (requestParameters['recordUpdateTypeDTO'] == null) {
            throw new runtime.RequiredError(
                'recordUpdateTypeDTO',
                'Required parameter "recordUpdateTypeDTO" was null or undefined when calling updateType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/records/{recordId}/type`.replace(`{${"recordId"}}`, encodeURIComponent(String(requestParameters['recordId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecordUpdateTypeDTOToJSON(requestParameters['recordUpdateTypeDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectRecordErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateType(requestParameters: UpdateTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObjectRecordErrorCode> {
        const response = await this.updateTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

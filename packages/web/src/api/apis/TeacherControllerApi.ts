// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageResponseTeacherObject,
  ResponseTeacherDeletePayloadTeacherErrorCode,
  ResponseTeacherTeacherErrorCode,
  TeacherCreateInput,
  TeacherUpdateInput,
} from '../models/index';
import {
    PageResponseTeacherObjectFromJSON,
    PageResponseTeacherObjectToJSON,
    ResponseTeacherDeletePayloadTeacherErrorCodeFromJSON,
    ResponseTeacherDeletePayloadTeacherErrorCodeToJSON,
    ResponseTeacherTeacherErrorCodeFromJSON,
    ResponseTeacherTeacherErrorCodeToJSON,
    TeacherCreateInputFromJSON,
    TeacherCreateInputToJSON,
    TeacherUpdateInputFromJSON,
    TeacherUpdateInputToJSON,
} from '../models/index';

export interface CreateTeacherRequest {
    teacherCreateInput: TeacherCreateInput;
}

export interface DeleteTeacherRequest {
    id: string;
}

export interface GetTeachersRequest {
    limit: number;
    offset: number;
}

export interface UpdateTeacherRequest {
    id: string;
    teacherUpdateInput: TeacherUpdateInput;
}

/**
 * 
 */
export class TeacherControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTeacherRaw(requestParameters: CreateTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseTeacherTeacherErrorCode>> {
        if (requestParameters['teacherCreateInput'] == null) {
            throw new runtime.RequiredError(
                'teacherCreateInput',
                'Required parameter "teacherCreateInput" was null or undefined when calling createTeacher().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherCreateInputToJSON(requestParameters['teacherCreateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseTeacherTeacherErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async createTeacher(requestParameters: CreateTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseTeacherTeacherErrorCode> {
        const response = await this.createTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTeacherRaw(requestParameters: DeleteTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseTeacherDeletePayloadTeacherErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTeacher().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseTeacherDeletePayloadTeacherErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async deleteTeacher(requestParameters: DeleteTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseTeacherDeletePayloadTeacherErrorCode> {
        const response = await this.deleteTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTeachersRaw(requestParameters: GetTeachersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageResponseTeacherObject>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling getTeachers().'
            );
        }

        if (requestParameters['offset'] == null) {
            throw new runtime.RequiredError(
                'offset',
                'Required parameter "offset" was null or undefined when calling getTeachers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/teachers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageResponseTeacherObjectFromJSON(jsonValue));
    }

    /**
     */
    async getTeachers(requestParameters: GetTeachersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageResponseTeacherObject> {
        const response = await this.getTeachersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTeacherRaw(requestParameters: UpdateTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseTeacherTeacherErrorCode>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTeacher().'
            );
        }

        if (requestParameters['teacherUpdateInput'] == null) {
            throw new runtime.RequiredError(
                'teacherUpdateInput',
                'Required parameter "teacherUpdateInput" was null or undefined when calling updateTeacher().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/teachers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TeacherUpdateInputToJSON(requestParameters['teacherUpdateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseTeacherTeacherErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateTeacher(requestParameters: UpdateTeacherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseTeacherTeacherErrorCode> {
        const response = await this.updateTeacherRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

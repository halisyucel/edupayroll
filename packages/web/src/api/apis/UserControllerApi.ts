// @ts-nocheck

/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseUserUpdatePasswordPayloadUserErrorCode,
  ResponseUserUserErrorCode,
  UserUpdateEmailInput,
  UserUpdateNameInput,
  UserUpdatePasswordInput,
} from '../models/index';
import {
    ResponseUserUpdatePasswordPayloadUserErrorCodeFromJSON,
    ResponseUserUpdatePasswordPayloadUserErrorCodeToJSON,
    ResponseUserUserErrorCodeFromJSON,
    ResponseUserUserErrorCodeToJSON,
    UserUpdateEmailInputFromJSON,
    UserUpdateEmailInputToJSON,
    UserUpdateNameInputFromJSON,
    UserUpdateNameInputToJSON,
    UserUpdatePasswordInputFromJSON,
    UserUpdatePasswordInputToJSON,
} from '../models/index';

export interface UpdateEmailRequest {
    userUpdateEmailInput: UserUpdateEmailInput;
}

export interface UpdateNameRequest {
    userUpdateNameInput: UserUpdateNameInput;
}

export interface UpdatePasswordRequest {
    userUpdatePasswordInput: UserUpdatePasswordInput;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserUserErrorCode>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserUserErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserUserErrorCode> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateEmailRaw(requestParameters: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserUserErrorCode>> {
        if (requestParameters['userUpdateEmailInput'] == null) {
            throw new runtime.RequiredError(
                'userUpdateEmailInput',
                'Required parameter "userUpdateEmailInput" was null or undefined when calling updateEmail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/email`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateEmailInputToJSON(requestParameters['userUpdateEmailInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserUserErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateEmail(requestParameters: UpdateEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserUserErrorCode> {
        const response = await this.updateEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateNameRaw(requestParameters: UpdateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserUserErrorCode>> {
        if (requestParameters['userUpdateNameInput'] == null) {
            throw new runtime.RequiredError(
                'userUpdateNameInput',
                'Required parameter "userUpdateNameInput" was null or undefined when calling updateName().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateNameInputToJSON(requestParameters['userUpdateNameInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserUserErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updateName(requestParameters: UpdateNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserUserErrorCode> {
        const response = await this.updateNameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePasswordRaw(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserUpdatePasswordPayloadUserErrorCode>> {
        if (requestParameters['userUpdatePasswordInput'] == null) {
            throw new runtime.RequiredError(
                'userUpdatePasswordInput',
                'Required parameter "userUpdatePasswordInput" was null or undefined when calling updatePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/password`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdatePasswordInputToJSON(requestParameters['userUpdatePasswordInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserUpdatePasswordPayloadUserErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async updatePassword(requestParameters: UpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserUpdatePasswordPayloadUserErrorCode> {
        const response = await this.updatePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

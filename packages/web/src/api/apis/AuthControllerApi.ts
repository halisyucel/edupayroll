/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginInput,
  RegisterInput,
  ResponseTokenPayloadAuthErrorCode,
} from '../models/index';
import {
    LoginInputFromJSON,
    LoginInputToJSON,
    RegisterInputFromJSON,
    RegisterInputToJSON,
    ResponseTokenPayloadAuthErrorCodeFromJSON,
    ResponseTokenPayloadAuthErrorCodeToJSON,
} from '../models/index';

export interface LoginRequest {
    loginInput: LoginInput;
}

export interface RegisterRequest {
    registerInput: RegisterInput;
}

/**
 * 
 */
export class AuthControllerApi extends runtime.BaseAPI {

    /**
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseTokenPayloadAuthErrorCode>> {
        if (requestParameters['loginInput'] == null) {
            throw new runtime.RequiredError(
                'loginInput',
                'Required parameter "loginInput" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters['loginInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseTokenPayloadAuthErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseTokenPayloadAuthErrorCode> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseTokenPayloadAuthErrorCode>> {
        if (requestParameters['registerInput'] == null) {
            throw new runtime.RequiredError(
                'registerInput',
                'Required parameter "registerInput" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterInputToJSON(requestParameters['registerInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseTokenPayloadAuthErrorCodeFromJSON(jsonValue));
    }

    /**
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseTokenPayloadAuthErrorCode> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
